{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a is: .001\n",
      "b is: 100\n",
      "c is: .001\n",
      "x_1a is (-1.000000082740371e-05+0j)\n",
      "x_2a is (-99999.99999+0j)\n",
      "x_1b is (-99999.99172596358-0j)\n",
      "x_2b is (-1.0000000001000001e-05-0j)\n"
     ]
    }
   ],
   "source": [
    "#The quadratic equation\n",
    "\n",
    "import cmath\n",
    "\n",
    "#If you were to take off the \"#\" of these and added to the ones below, this would be a more specific use of the prgram\n",
    "#a = .001\n",
    "#b = 1000\n",
    "#c = .001\n",
    "\n",
    "#this is so the user can put any numbers in. This is used as a general use of the program\n",
    "a = float(input('a is: '))\n",
    "b = float(input('b is: '))\n",
    "c = float(input('c is: '))\n",
    "\n",
    "#for under the root\n",
    "d = (b**2) - (4*a*c)\n",
    "\n",
    "if d>0:\n",
    "    x_1a = (-b + cmath.sqrt(d))/(2*a)\n",
    "    x_2a = (-b - cmath.sqrt(d))/(2*a)\n",
    "\n",
    "    print ('x_1a is {0}'.format(x_1a))\n",
    "    print ('x_2a is {0}'.format(x_2a))\n",
    "\n",
    "#part b of question 1\n",
    "    x_1b = (2*c)/(-b + cmath.sqrt(d))\n",
    "    x_2b = (2*c)/(-b - cmath.sqrt(d))\n",
    "\n",
    "    print ('x_1b is {0}'.format(x_1b))\n",
    "    print ('x_2b is {0}'.format(x_2b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A is: 59\n",
      "Z is: 28\n",
      "498.144677545714\n"
     ]
    }
   ],
   "source": [
    "import cmath\n",
    "\n",
    "A = float(input('A is: '))\n",
    "Z = float(input('Z is: '))\n",
    "\n",
    "a_1 = 15.67\n",
    "a_2 = 17.23\n",
    "a_3 = 0.75\n",
    "a_4 = 93.2\n",
    "\n",
    "B = 0.0    \n",
    "\n",
    "if A %2 == 0 and Z %2 == 0:\n",
    "    a_5 = 12.0   \n",
    "elif A %2 ==0 and Z %2 > 0:\n",
    "    a_5 = -12.0\n",
    "else:  \n",
    "    a_5 = 0\n",
    "    \n",
    "B = (a_1*A)-(a_2*(A**(2/3)))-(a_3*((Z**2)/(A**(1/3))))-(a_4*(((A-2*Z)**2)/A))-(a_5/(A**(1/2)))\n",
    "                                                        \n",
    "print(B)\n",
    "                                                    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
